pipeline {
    agent any
    tools {
        go 'go1.18'
    }
    environment {
        GO114MODULE = 'on'
        CGO_ENABLED = 0
        DOCKER_IMAGE = "krobus00/go-test-service"
    }
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH_TAG'
        choice(
            name: 'ENV',
            choices: ['staging','production'],            
            description: 'deploy environtment'
        )
    }    
    stages {
		stage('Checkout') {
			steps {
				checkout([
					$class: 'GitSCM',
					branches: [[name: '*/${BRANCH}']],
                    credentialsId: 'gh-krobus00',
					clean: true,
					extensions: [],
					submoduleCfg: [],
					userRemoteConfigs: [[
					url: 'https://github.com/krobus00/go-test-service.git'
					]]
				])
			}
		}
        stage("Add config files") {
            steps {
                configFileProvider([configFile(fileId: "6c88279b-90c0-4e94-8432-cf8892b4871d", targetLocation: 'config.yml')]) {
                    sh "ls -lar"
                }
            }
        }
		stage('Code Analysis') {            
			steps {				
                withEnv(["PATH+GO=${HOME}/go/bin"]){
                    sh 'go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.46.2'
                    sh 'make lint'
                }
            }
		}
        stage("Unit Test") {
            steps {
                sh 'make test'
            }
        }
		stage("Build Image") {
            environment {
                DOCKER_TAG="${params.ENV}-$BUILD_NUMBER"
            }
            steps {
                sh 'docker build . -t $DOCKER_IMAGE:$DOCKER_TAG'
            }
        }
        stage('Push to Docker Hub') {
            environment {
                DOCKER_TAG="${params.ENV}-$BUILD_NUMBER"
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'dh-krobus00', passwordVariable: 'dockerhubPassword', usernameVariable: 'dockerhubUser')]) {
                    sh "docker login -u ${env.dockerhubUser} -p ${env.dockerhubPassword}"
                    sh 'docker push $DOCKER_IMAGE:$DOCKER_TAG'
                    echo 'remove image'
                    sh 'docker rmi $DOCKER_IMAGE:$DOCKER_TAG'
                }
            }
        }
    }
	post {
        always {
            cleanWs()
            sh 'docker image prune --filter label=stage=builder'
        }
    }
}